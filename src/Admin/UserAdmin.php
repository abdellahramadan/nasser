<?php

namespace App\Admin;


use App\Entity\Profile;
use App\Entity\Transaction;
use Sonata\AdminBundle\Admin\AbstractAdmin;
use Sonata\AdminBundle\Datagrid\DatagridMapper;
use Sonata\AdminBundle\Datagrid\ListMapper;
use Sonata\AdminBundle\Datagrid\ProxyQueryInterface;
use Sonata\AdminBundle\Form\FormMapper;
use Sonata\AdminBundle\Form\Type\ModelType;
use Sonata\AdminBundle\Show\ShowMapper;
use Symfony\Component\Form\Extension\Core\Type\EmailType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;

class UserAdmin extends AbstractAdmin
{
    private $passwordHasher;

    public function __construct(string $code, string $class, string $baseControllerName, UserPasswordHasherInterface $passwordHasher)
    {
        parent::__construct($code, $class, $baseControllerName);

        $this->passwordHasher = $passwordHasher;
    }

    public function configureFormFields(FormMapper $form): void
    {
        parent::configureFormFields($form); // TODO: Change the autogenerated stub

        $form
            ->tab('Client')
                ->with('Info Client')
                    ->add('username', TextType::class, [
                        'attr' => [
                            'placeholder' => 'Swift'
                        ],
                        'label' => 'Swift',
                    ])
                    ->add('email', EmailType::class, [
                        'attr' => [
                            'placeholder' => 'Email'
                        ],
                        'label' => 'Email'
                    ])
                ->end()
            ->end()
            ->tab('Profile')
                ->with('Profile Client')
                    ->add('profile', ModelType::class, [
                        'class' => Profile::class,
                        'property' => 'fullname',
                    ])
                ->end()
            ->end()
            ->tab('Statut')
                ->with('Statut Transaction')
                    ->add('transaction', ModelType::class, [
                        'class' => Transaction::class,
                        'property' => 'sender'
                    ])
                ->end()
            ->end()
        ;
    }

    public function configureDatagridFilters(DatagridMapper $filter): void
    {
        parent::configureDatagridFilters($filter); // TODO: Change the autogenerated stub

        $filter
            ->add('id')
            ->add('username', null, ['label' => 'Swift'])
            ->add('email')
        ;

    }

    public function configureListFields(ListMapper $list): void
    {
        parent::configureListFields($list); // TODO: Change the autogenerated stub

        $list
            ->add('id')
            ->addIdentifier('username', null, ['label' => 'Swift'])
            ->add('email')
        ;
    }

    public function configureShowFields(ShowMapper $show): void
    {
        parent::configureShowFields($show); // TODO: Change the autogenerated stub

        $show
            ->add('id')
            ->add('username', null, ['label' => 'Swift'])
            ->add('email')
        ;
    }

    public function prePersist(object $user): void
    {
        parent::prePersist($user); // TODO: Change the autogenerated stub

        $user->setPassword(
                $this->passwordHasher->hashPassword($user, 'bonjour1')
        );
        $user->setRoles(['ROLE_CUSTOMER', 'ROLE_USER']);
    }

    protected function configureQuery(ProxyQueryInterface $query): ProxyQueryInterface
    {
        $query = parent::configureQuery($query);git

        $role = 'ROLE_CUSTOMER';
        $query->andWhere($query->expr()->like('o.roles', ':param'))
            ->setParameter('param', "%$role%")
        ;
        return $query;
    }

}